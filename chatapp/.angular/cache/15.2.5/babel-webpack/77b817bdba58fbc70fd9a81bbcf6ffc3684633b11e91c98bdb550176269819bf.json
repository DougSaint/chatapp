{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n    this.token = null;\n  }\n  register(username, password) {\n    return this.http.post(`${this.apiUrl}/register`, {\n      username,\n      password\n    });\n  }\n  canActivate(route, state) {\n    const token = this.authService.getToken();\n    if (token) {\n      const payload = jwt_decode(token);\n      if (payload.exp > Date.now() / 1000) {\n        return true;\n      }\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('auth_token', token);\n  }\n  getToken() {\n    if (!this.token) {\n      this.token = localStorage.getItem('auth_token');\n    }\n    return this.token;\n  }\n  clearToken() {\n    this.token = null;\n    localStorage.removeItem('auth_token');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAG,uBAAuB;IAChC,UAAK,GAAkB,IAAI;EAEI;EAEvCC,QAAQ,CAACC,QAAgB,EAAEC,QAAgB;IACzC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,WAAW,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EAC1E;EAEAG,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,KAAK,GAAG,IAAI,CAACC,WAAW,CAACC,QAAQ,EAAE;IAEzC,IAAIF,KAAK,EAAE;MACT,MAAMG,OAAO,GAAGC,UAAU,CAACJ,KAAK,CAAC;MAEjC,IAAIG,OAAO,CAACE,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,EAAE;QACnC,OAAO,IAAI;;;IAIf,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACd;EAGAC,QAAQ,CAACV,KAAa;IACpB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClBW,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEZ,KAAK,CAAC;EAC3C;EAEAE,QAAQ;IACN,IAAI,CAAC,IAAI,CAACF,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,GAAGW,YAAY,CAACE,OAAO,CAAC,YAAY,CAAC;;IAGjD,OAAO,IAAI,CAACb,KAAK;EACnB;EAEAc,UAAU;IACR,IAAI,CAACd,KAAK,GAAG,IAAI;IACjBW,YAAY,CAACI,UAAU,CAAC,YAAY,CAAC;EACvC;;AA1CW1B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YAFV;AAAM","names":["AuthService","constructor","http","register","username","password","post","apiUrl","canActivate","route","state","token","authService","getToken","payload","jwt_decode","exp","Date","now","router","navigate","setToken","localStorage","setItem","getItem","clearToken","removeItem","factory","providedIn"],"sourceRoot":"","sources":["/home/doug/Área de Trabalho/process/chatapp/src/app/auth.guard.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000';\n  private token: string | null = null;\n\n  constructor(private http: HttpClient) {}\n\n  register(username: string, password: string) {\n    return this.http.post(`${this.apiUrl}/register`, { username, password });\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    const token = this.authService.getToken();\n\n    if (token) {\n      const payload = jwt_decode(token);\n\n      if (payload.exp > Date.now() / 1000) {\n        return true;\n      }\n    }\n\n    this.router.navigate(['/login']);\n    return false;\n  }\n\n\n  setToken(token: string) {\n    this.token = token;\n    localStorage.setItem('auth_token', token);\n  }\n\n  getToken() {\n    if (!this.token) {\n      this.token = localStorage.getItem('auth_token');\n    }\n\n    return this.token;\n  }\n\n  clearToken() {\n    this.token = null;\n    localStorage.removeItem('auth_token');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}