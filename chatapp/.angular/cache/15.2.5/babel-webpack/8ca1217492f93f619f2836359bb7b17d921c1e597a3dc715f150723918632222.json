{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst TOKEN_KEY = 'auth-token';\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n  }\n  register(username, password) {\n    return this.http.post(`${this.apiUrl}/register`, {\n      username,\n      password\n    });\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password\n    }).toPromise().then(response => {\n      this.setToken(response.token);\n    });\n  }\n  setToken(token) {\n    if (token) {\n      localStorage.setItem(TOKEN_KEY, token);\n    } else {\n      localStorage.removeItem(TOKEN_KEY);\n    }\n  }\n  getToken() {\n    return localStorage.getItem(TOKEN_KEY);\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    const jwtData = token.split('.')[1];\n    const decodedJwt = JSON.parse(atob(jwtData));\n    const expirationDate = new Date(decodedJwt.exp * 1000);\n    return expirationDate > new Date();\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAGA,MAAMA,SAAS,GAAG,YAAY;AAK9B,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,uBAAuB;EAED;EAEvCC,QAAQ,CAACC,QAAgB,EAAEC,QAAgB;IACzC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,WAAW,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EAC1E;EAEAG,KAAK,CAACJ,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAoB,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACI,SAAS,EAAE,CACjGC,IAAI,CAAEC,QAAQ,IAAI;MACjB,IAAI,CAACC,QAAQ,CAACD,QAAQ,CAACE,KAAK,CAAC;IAC/B,CAAC,CAAC;EACN;EAEAD,QAAQ,CAACC,KAAoB;IAC3B,IAAIA,KAAK,EAAE;MACTC,YAAY,CAACC,OAAO,CAAChB,SAAS,EAAEc,KAAK,CAAC;KACvC,MAAM;MACLC,YAAY,CAACE,UAAU,CAACjB,SAAS,CAAC;;EAEtC;EAEAkB,QAAQ;IACN,OAAOH,YAAY,CAACI,OAAO,CAACnB,SAAS,CAAC;EACxC;EAEAoB,eAAe;IACb,MAAMN,KAAK,GAAG,IAAI,CAACI,QAAQ,EAAE;IAE7B,IAAI,CAACJ,KAAK,EAAE;MACV,OAAO,KAAK;;IAGd,MAAMO,OAAO,GAAGP,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnC,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,OAAO,CAAC,CAAC;IAC5C,MAAMM,cAAc,GAAG,IAAIC,IAAI,CAACL,UAAU,CAACM,GAAG,GAAG,IAAI,CAAC;IAEtD,OAAOF,cAAc,GAAG,IAAIC,IAAI,EAAE;EACpC;;AAxCW3B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA6B,SAAX7B,WAAW;EAAA8B,YAFV;AAAM","names":["TOKEN_KEY","AuthService","constructor","http","register","username","password","post","apiUrl","login","toPromise","then","response","setToken","token","localStorage","setItem","removeItem","getToken","getItem","isAuthenticated","jwtData","split","decodedJwt","JSON","parse","atob","expirationDate","Date","exp","factory","providedIn"],"sourceRoot":"","sources":["/home/doug/Área de Trabalho/process/chatapp/src/app/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nconst TOKEN_KEY = 'auth-token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000';\n\n  constructor(private http: HttpClient) {}\n\n  register(username: string, password: string) {\n    return this.http.post(`${this.apiUrl}/register`, { username, password });\n  }\n\n  login(username: string, password: string) {\n    return this.http.post<{ token: string }>(`${this.apiUrl}/login`, { username, password }).toPromise()\n      .then((response) => {\n        this.setToken(response.token);\n      });\n  }\n\n  setToken(token: string | null) {\n    if (token) {\n      localStorage.setItem(TOKEN_KEY, token);\n    } else {\n      localStorage.removeItem(TOKEN_KEY);\n    }\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(TOKEN_KEY);\n  }\n\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n\n    if (!token) {\n      return false;\n    }\n\n    const jwtData = token.split('.')[1];\n    const decodedJwt = JSON.parse(atob(jwtData));\n    const expirationDate = new Date(decodedJwt.exp * 1000);\n\n    return expirationDate > new Date();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}