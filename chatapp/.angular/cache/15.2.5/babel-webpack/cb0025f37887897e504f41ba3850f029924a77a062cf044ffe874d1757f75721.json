{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const token = this.authService.getToken();\n    if (token) {\n      const authRequest = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(authRequest);\n    }\n    return next.handle(request);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,eAAe;EAC1BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IAEzC,IAAID,KAAK,EAAE;MACT,MAAME,WAAW,GAAGJ,OAAO,CAACK,KAAK,CAAC;QAChCC,OAAO,EAAEN,OAAO,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,KAAK,EAAE;OAChE,CAAC;MAEF,OAAOD,IAAI,CAACO,MAAM,CAACJ,WAAW,CAAC;;IAGjC,OAAOH,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC7B;;AAfWJ,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAa,SAAfb,eAAe;AAAA","names":["AuthInterceptor","constructor","authService","intercept","request","next","token","getToken","authRequest","clone","headers","set","handle","factory"],"sourceRoot":"","sources":["/home/doug/Área de Trabalho/process/chatapp/src/app/interceptors/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = this.authService.getToken();\n\n    if (token) {\n      const authRequest = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n\n      return next.handle(authRequest);\n    }\n\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}