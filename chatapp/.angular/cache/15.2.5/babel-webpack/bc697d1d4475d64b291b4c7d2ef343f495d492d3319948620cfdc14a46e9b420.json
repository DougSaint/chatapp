{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../web-socket.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../private-message-modal/private-message-modal.component\";\nfunction ChatComponent_app_private_message_modal_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-private-message-modal\", 6, 7);\n    i0.ɵɵlistener(\"privateMessageSent\", function ChatComponent_app_private_message_modal_0_Template_app_private_message_modal_privateMessageSent_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.sendPrivateMessage($event.recipient, $event.text));\n    })(\"modalClosed\", function ChatComponent_app_private_message_modal_0_Template_app_private_message_modal_modalClosed_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.privateMessageModalVisible = false);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChatComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", message_r6, \" \");\n  }\n}\nexport class ChatComponent {\n  constructor(webSocketService) {\n    this.webSocketService = webSocketService;\n    this.messages = [];\n    this.messageText = '';\n    this.privateMessageModalVisible = false;\n  }\n  sendMessage() {\n    console.log('sendMessage called');\n    const username = localStorage.getItem('username');\n    if (this.messageText.trim() !== '') {\n      console.log('Sending message:', {\n        text: this.messageText,\n        username\n      });\n      this.webSocketService.emit('message', {\n        text: this.messageText,\n        username\n      });\n      this.messageText = '';\n    }\n  }\n  sendPrivateMessage(recipient, text) {\n    this.webSocketService.emit(\"privateMessage\", {\n      recipient,\n      text\n    });\n  }\n  ngOnInit() {\n    // Registra o nome de usuário no servidor\n    const username = localStorage.getItem(\"username\");\n    this.webSocketService.emit(\"register\", username);\n    // Altere esta parte para usar o método onMessage() do serviço WebSocketService\n    this.webSocketService.onMessage().subscribe(message => {\n      this.messages.push(message);\n    });\n    this.webSocketService.on(\"privateMessage\", message => {\n      console.log('New message:', message);\n      // Aqui você pode adicionar a mensagem privada ao array de mensagens ou tratá-la de outra forma\n    });\n  }\n\n  ngOnDestroy() {\n    this.webSocketService.disconnect();\n  }\n}\nChatComponent.ɵfac = function ChatComponent_Factory(t) {\n  return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.WebSocketService));\n};\nChatComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChatComponent,\n  selectors: [[\"app-chat\"]],\n  decls: 8,\n  vars: 3,\n  consts: [[3, \"privateMessageSent\", \"modalClosed\", 4, \"ngIf\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [3, \"submit\"], [\"type\", \"text\", \"placeholder\", \"Type your message\", \"name\", \"chat\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [3, \"privateMessageSent\", \"modalClosed\"], [\"privateMessageModal\", \"\"]],\n  template: function ChatComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ChatComponent_app_private_message_modal_0_Template, 2, 0, \"app-private-message-modal\", 0);\n      i0.ɵɵelementStart(1, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function ChatComponent_Template_button_click_1_listener() {\n        return ctx.privateMessageModalVisible = true;\n      });\n      i0.ɵɵtext(2, \"Enviar mensagem privada\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, ChatComponent_div_3_Template, 2, 1, \"div\", 2);\n      i0.ɵɵelementStart(4, \"form\", 3);\n      i0.ɵɵlistener(\"submit\", function ChatComponent_Template_form_submit_4_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵelementStart(5, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function ChatComponent_Template_input_ngModelChange_5_listener($event) {\n        return ctx.messageText = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 5);\n      i0.ɵɵtext(7, \"Send\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.privateMessageModalVisible);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.messageText);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm, i4.PrivateMessageModalComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;;IACEA,uDAA+M;IAA5HA;MAAAA;MAAA;MAAA,OAAsBA,uEAAiD;IAAA,EAAC;MAAAA;MAAA;MAAA,0DAA6C,KAAK;IAAA,EAAlD;IAAoDA,iBAA4B;;;;;IAM7OA,2BAAsC;IAClCA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,2CACF;;;ACAF,OAAM,MAAOC,aAAa;EACxBC,YAAoBC,gBAAkC;IAAlC,qBAAgB,GAAhBA,gBAAgB;IAEpC,aAAQ,GAAU,EAAE;IACpB,gBAAW,GAAW,EAAE;IACxB,+BAA0B,GAAY,KAAK;EAJc;EAMzDC,WAAW;IACTC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,IAAI,IAAI,CAACC,WAAW,CAACC,IAAI,EAAE,KAAK,EAAE,EAAE;MAClCN,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE;QAAEM,IAAI,EAAE,IAAI,CAACF,WAAW;QAAEH;MAAQ,CAAE,CAAC;MACrE,IAAI,CAACJ,gBAAgB,CAACU,IAAI,CAAC,SAAS,EAAE;QAAED,IAAI,EAAE,IAAI,CAACF,WAAW;QAAEH;MAAQ,CAAE,CAAC;MAC3E,IAAI,CAACG,WAAW,GAAG,EAAE;;EAEzB;EAEAI,kBAAkB,CAACC,SAAiB,EAAEH,IAAY;IAChD,IAAI,CAACT,gBAAgB,CAACU,IAAI,CAAC,gBAAgB,EAAE;MAAEE,SAAS;MAAEH;IAAI,CAAE,CAAC;EACnE;EAEAI,QAAQ;IACN;IACA,MAAMT,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,IAAI,CAACN,gBAAgB,CAACU,IAAI,CAAC,UAAU,EAAEN,QAAQ,CAAC;IAEhD;IACA,IAAI,CAACJ,gBAAgB,CAACc,SAAS,EAAE,CAACC,SAAS,CAAEC,OAAY,IAAI;MAE3D,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,OAAO,CAAC;IAC7B,CAAC,CAAC;IAEF,IAAI,CAAChB,gBAAgB,CAACmB,EAAE,CAAC,gBAAgB,EAAGH,OAAY,IAAI;MAC1Dd,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEa,OAAO,CAAC;MACpC;IACF,CAAC,CAAC;EACJ;;EAEAI,WAAW;IACT,IAAI,CAACpB,gBAAgB,CAACqB,UAAU,EAAE;EACpC;;AAxCWvB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDRxB7B,0GAA2O;MAC3OA,iCAAoD;MAA5CA;QAAA,wCAAsC,IAAI;MAAA,EAAC;MAACA,uCAAuB;MAAAA,iBAAS;MAKtFA,8DAEQ;MAENA,+BAA+B;MAAzBA;QAAA,OAAU8B,iBAAa;MAAA,EAAC;MAC5B9B,gCAA0F;MAAvEA;QAAA;MAAA,EAAyB;MAA5CA,iBAA0F;MAC1FA,iCAAsB;MAAAA,oBAAI;MAAAA,iBAAS;;;MAZTA,qDAAgC;MAMrCA,eAAW;MAAXA,sCAAW;MAKbA,eAAyB;MAAzBA,yCAAyB","names":["i0","ChatComponent","constructor","webSocketService","sendMessage","console","log","username","localStorage","getItem","messageText","trim","text","emit","sendPrivateMessage","recipient","ngOnInit","onMessage","subscribe","message","messages","push","on","ngOnDestroy","disconnect","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/doug/Área de Trabalho/process/chatapp/src/app/chat/chat.component.html","/home/doug/Área de Trabalho/process/chatapp/src/app/chat/chat.component.ts"],"sourcesContent":["<!-- Adicione *ngIf=\"privateMessageModalVisible\" no elemento <app-private-message-modal> -->\n  <app-private-message-modal *ngIf=\"privateMessageModalVisible\" #privateMessageModal (privateMessageSent)=\"sendPrivateMessage($event.recipient, $event.text)\" (modalClosed)=\"privateMessageModalVisible = false\"></app-private-message-modal>\n  <button (click)=\"privateMessageModalVisible = true\">Enviar mensagem privada</button>\n  <!-- ... -->\n\n  \n  \n<div *ngFor=\"let message of messages\">\n    {{ message }}\n  </div>\n  \n  <form (submit)=\"sendMessage()\">\n    <input type=\"text\" [(ngModel)]=\"messageText\" placeholder=\"Type your message\" name=\"chat\"/>\n    <button type=\"submit\">Send</button>\n  </form>\n  ","import { WebSocketService } from '../web-socket.service';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css'],\n})\nexport class ChatComponent implements OnInit, OnDestroy {\n  constructor(private webSocketService: WebSocketService) {}\n\n  messages: any[] = [];\n  messageText: string = '';\n  privateMessageModalVisible: boolean = false;\n\n  sendMessage() {\n    console.log('sendMessage called');\n    const username = localStorage.getItem('username');\n    if (this.messageText.trim() !== '') {\n      console.log('Sending message:', { text: this.messageText, username });\n      this.webSocketService.emit('message', { text: this.messageText, username });\n      this.messageText = '';\n    }\n  }\n\n  sendPrivateMessage(recipient: string, text: string) {\n    this.webSocketService.emit(\"privateMessage\", { recipient, text });\n  }\n\n  ngOnInit(): void {\n    // Registra o nome de usuário no servidor\n    const username = localStorage.getItem(\"username\");\n    this.webSocketService.emit(\"register\", username);\n\n    // Altere esta parte para usar o método onMessage() do serviço WebSocketService\n    this.webSocketService.onMessage().subscribe((message: any) => {\n      \n      this.messages.push(message);\n    });\n\n    this.webSocketService.on(\"privateMessage\", (message: any) => {\n      console.log('New message:', message);\n      // Aqui você pode adicionar a mensagem privada ao array de mensagens ou tratá-la de outra forma\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.webSocketService.disconnect();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}