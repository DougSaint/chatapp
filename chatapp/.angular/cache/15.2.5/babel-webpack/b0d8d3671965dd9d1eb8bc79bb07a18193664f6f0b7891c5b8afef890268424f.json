{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor() {\n    this.socket = io(environment.websocketUrl);\n  }\n  // Método para emitir eventos\n  emit(eventName, data) {\n    this.socket.emit(eventName, data);\n  }\n  // Método para ouvir eventos\n  on(eventName, callback) {\n    this.socket.on(eventName, callback);\n  }\n  // Método para desconectar do WebSocket\n  disconnect() {\n    this.socket.disconnect();\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,EAAE,QAAgB,kBAAkB;AAC7C,SAASC,WAAW,QAAQ,6BAA6B;;AAOzD,OAAM,MAAOC,gBAAgB;EAI3BC;IACE,IAAI,CAACC,MAAM,GAAGJ,EAAE,CAACC,WAAW,CAACI,YAAY,CAAC;EAC5C;EAEA;EACAC,IAAI,CAACC,SAAiB,EAAEC,IAAS;IAC/B,IAAI,CAACJ,MAAM,CAACE,IAAI,CAACC,SAAS,EAAEC,IAAI,CAAC;EACnC;EAEA;EACAC,EAAE,CAACF,SAAiB,EAAEG,QAA6B;IACjD,IAAI,CAACN,MAAM,CAACK,EAAE,CAACF,SAAS,EAAEG,QAAQ,CAAC;EACrC;EAEA;EACAC,UAAU;IACR,IAAI,CAACP,MAAM,CAACO,UAAU,EAAE;EAC1B;;AArBWT,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAU,SAAhBV,gBAAgB;EAAAW,YAJf;AAAM","names":["io","environment","WebSocketService","constructor","socket","websocketUrl","emit","eventName","data","on","callback","disconnect","factory","providedIn"],"sourceRoot":"","sources":["/home/doug/Área de Trabalho/process/chatapp/src/app/web-socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { io, Socket } from 'socket.io-client';\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\n\n\nexport class WebSocketService {\n\n  private socket: Socket;\n\n  constructor() {\n    this.socket = io(environment.websocketUrl);\n  }\n\n  // Método para emitir eventos\n  emit(eventName: string, data: any) {\n    this.socket.emit(eventName, data);\n  }\n\n  // Método para ouvir eventos\n  on(eventName: string, callback: (data: any) => void) {\n    this.socket.on(eventName, callback);\n  }\n\n  // Método para desconectar do WebSocket\n  disconnect() {\n    this.socket.disconnect();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}