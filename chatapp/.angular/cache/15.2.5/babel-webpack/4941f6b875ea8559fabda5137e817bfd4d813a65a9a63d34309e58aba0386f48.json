{"ast":null,"code":"import { io } from 'socket.io-client';\nimport * as i0 from \"@angular/core\";\nexport class WebsocketService {\n  constructor() {\n    this.socket = io('http://localhost:3000'); // Use o endereço do seu servidor WebSocket\n  }\n  // Método para enviar uma mensagem ao servidor\n  sendMessage(message) {\n    this.socket.emit('message', message);\n  }\n  // Método para ouvir as mensagens enviadas pelo servidor\n  onMessage() {\n    return new Observable(observer => {\n      this.socket.on('message', message => {\n        observer.next(message);\n      });\n    });\n  }\n}\nWebsocketService.ɵfac = function WebsocketService_Factory(t) {\n  return new (t || WebsocketService)();\n};\nWebsocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebsocketService,\n  factory: WebsocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,EAAE,QAAgB,kBAAkB;;AAK7C,OAAM,MAAOC,gBAAgB;EAG3BC;IACE,IAAI,CAACC,MAAM,GAAGH,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;EAC7C;EAEA;EACAI,WAAW,CAACC,OAAe;IACzB,IAAI,CAACF,MAAM,CAACG,IAAI,CAAC,SAAS,EAAED,OAAO,CAAC;EACtC;EAEA;EACAE,SAAS;IACP,OAAO,IAAIC,UAAU,CAAEC,QAAQ,IAAI;MACjC,IAAI,CAACN,MAAM,CAACO,EAAE,CAAC,SAAS,EAAGL,OAAe,IAAI;QAC5CI,QAAQ,CAACE,IAAI,CAACN,OAAO,CAAC;MACxB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AAnBWJ,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAW,SAAhBX,gBAAgB;EAAAY,YAFf;AAAM","names":["io","WebsocketService","constructor","socket","sendMessage","message","emit","onMessage","Observable","observer","on","next","factory","providedIn"],"sourceRoot":"","sources":["/home/doug/Área de Trabalho/process/chatapp/src/app/web-socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { io, Socket } from 'socket.io-client';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebsocketService {\n  private socket: Socket;\n\n  constructor() {\n    this.socket = io('http://localhost:3000'); // Use o endereço do seu servidor WebSocket\n  }\n\n  // Método para enviar uma mensagem ao servidor\n  sendMessage(message: string): void {\n    this.socket.emit('message', message);\n  }\n\n  // Método para ouvir as mensagens enviadas pelo servidor\n  onMessage(): Observable<string> {\n    return new Observable((observer) => {\n      this.socket.on('message', (message: string) => {\n        observer.next(message);\n      });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}